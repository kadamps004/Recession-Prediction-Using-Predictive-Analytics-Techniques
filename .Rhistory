geom_line(aes(y = GOLD), size = 1.5, color = "blue") +
geom_vline(xintercept = c(1980, 1989, 2000, 2006, 2008),
color = "#FF4026", size = 1.5) +
geom_line(aes(y = OIL), size = 1.5, color = "green") +
geom_line(aes(y = CHFUSD), size = 1.5, color = "orange") +
geom_line(aes(y = JPYUSD), size = 1.5, color = "purple") +
scale_x_continuous(limits = c(1977, 2019)) +
scale_y_continuous(limits = c(0, max(data[,2:5], na.rm = TRUE))) +
facet_wrap(~phase, nrow = 4, scales = "free_y") +
theme_bw() +
theme(strip.text = element_blank(),
strip.background = element_blank(),
panel.spacing = unit(0.2, "lines"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
strip.placement = "outside") +
labs(x = "Year",
y = NULL,
title = "Impact of the Yield Curve inversion on price of goods") +
guides(fill = FALSE)
# create the plot
ggplot(data, aes(x = Year)) +
geom_line(aes(y = GOLD), size = 1.5, color = "blue") +
geom_vline(xintercept = c(1980, 1989, 2000, 2006, 2008),
color = "#FF4026", size = 1.5) +
scale_x_continuous(limits = c(1977, 2019)) +
scale_y_continuous(limits = c(0, max(data[,2:5], na.rm = TRUE))) +
facet_wrap(~phase, nrow = 4, scales = "free_y") +
theme_bw() +
theme(strip.text = element_blank(),
strip.background = element_blank(),
panel.spacing = unit(0.2, "lines"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
strip.placement = "outside") +
labs(x = "Year",
y = NULL,
title = "Impact of the Yield Curve inversion on price of goods") +
guides(fill = FALSE)
library(ggplot2)
# Compute the correlation matrix
corr <- cor(data[c('SP500', 'GOLD', 'CHFUSD', 'JPYUSD', 'Flag is neg')])
# Generate a mask for the upper triangle
mask <- upper.tri(corr)
# Set up the ggplot figure
ggplot(data = melt(corr), aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Correlation Heatmap", x = "", y = "", fill = "Correlation") +
coord_fixed() +
geom_text(aes(label = round(value, 2)), size = 3, color = "black", fontface = "bold", vjust = 0.5, hjust = 0.5, show.legend = FALSE, data = subset(melt(corr), !mask))
##Partitioning the data
set.seed(111)
## Creating a lineear model for Prediction data
prediction.df$Data.Yeild.GPD- <- ifelse(is.na(prediction.df$Data.Yeild.GPD), 0, prediction.df$Data.Yeild.GPD)
# Loading Housing data
prediction.df <- read.csv("/Users/priyakadam/Downloads/recession_prediction.csv", header = TRUE)  # load data
dim(prediction.df)  # find the dimension of data frame
## Removing #N/A values
prediction.df$Data.Yeild.GPD <- replace(prediction.df$Data.Yeild.GPD, prediction.df$Data.Yeild.GPD == "#N/A", 0)
print(prediction.df)
##Partitioning the data
set.seed(111)
train.index <- sample(row.names(prediction.df), 0.6*dim(prediction.df)[1])
valid.index <- setdiff(row.names(prediction.df), train.index)
train.df <- prediction.df[train.index, ]
valid.df <- prediction.df[valid.index, ]
Ownership
## scatter plot
plot(Lot_Size ~ Income, data=train.df, pch=ifelse(train.df$Date=="Date", 1, 3))
### Performing the prediction using KNN-algorithm
train.norm.df <- train.df
valid.norm.df <- valid.df
mower.norm.df <- prediction.df
new.df <- data.frame(Income = 60, Lot_Size = 20)
# use preProcess() from the caret package to normalize Income and Lot_Size.
norm.values <- preProcess(train.df[, 1:2], method=c("center", "scale"))
train.norm.df[, 1:2] <- predict(norm.values, train.df[, 1:2])
valid.norm.df[, 1:2] <- predict(norm.values, valid.df[, 1:2])
mower.norm.df[, 1:2] <- predict(norm.values, prediction.df[, 1:2])
new.norm.df <- predict(norm.values, new.df)
## Performing the Niave Bias
library(e1071)
delays.nb <- naiveBayes(train.df$Data.yeild..Unemployment.Rate ~ ., data = train.df)
## predict probabilities
pred.prob <- predict(delays.nb, newdata = valid.df, type = "raw")
## predict class membership
pred.class <- predict(delays.nb, newdata = valid.df)
print(pred.class)
acc(pred.class)
accuracy <- mean(train.df$Data.yeild..Unemployment.Rate)
cat("Accuracy:", round(accuracy, 3))
summary(pred.class)
# Fit a logistic regression model
model <- glm(Recession ~ Data.yeild..Unemployment.Rate, data = train.df, family = binomial)
library(forecast)
library(FNN)
# use KNN to predict CAT..MEDV using the other variables
k <- 19  # choose the number of neighbors to use
library(forecast)
library(FNN)
# use KNN to predict CAT..MEDV using the other variables
k <- 12  # choose the number of neighbors to use
# Using Approach 2: Train test Split
sample_index = sample(c(1:506), 506*0.8)
train_sample = prediction.df[sample_index,]
test_sample = prediction.df[-sample_index,]
# use KNN to predict CAT..MEDV using the other variables
k <- 12  # choose the number of neighbors to use
pred <- knn(train_sample[,-12], test_sample[,-12], train_sample$Data.yeild..Unemployment.Rate, k)
pred <- knn(train_sample[,-12], test_sample[,-12], train_sample$Data.Yeild.GPD, k)
pred <- knn(train_sample[,-12], test_sample[,-12], as.factor(train_sample$Data.Yeild.GPD), k)
pred <- knn(train_sample[,-12], test_sample[,-12], as.numeric(train_sample$Data.Yeild.GPD), k)
pred <- knn(as.numeric(train_sample[,-12]), as.numeric(test_sample[,-12]), as.numeric(train_sample$Data.Yeild.GPD), k)
pred <- knn(as.numeric(train_sample[,-12]), as.numeric(test_sample[,-12]), train_sample$Data.Yeild.GPD, k)
train_matrix <- as.matrix(train_sample[,-12])
test_matrix <- as.matrix(test_sample[,-12])
pred <- knn(as.numeric(train_matrix), as.numeric(test_matrix), train_sample$Data.Yeild.GPD, k)
pred <- knn(as.numeric(train_matrix), as.numeric(test_matrix), train_sample$Data.Yeild.GPD, k)
train_matrix <- as.matrix(train_sample[,-12])
test_matrix <- as.matrix(test_sample[,-12])
pred <- knn(as.numeric(train_matrix), as.numeric(test_matrix), train_sample$Data.Yeild.Interest.Rate..Discount.Rate, k)
## Removing #N/A values
prediction.df$Data.Yeild.GPD <- replace(prediction.df$Data.Yeild.GPD, prediction.df$Data.Yeild.GPD == "#N/A", 0)
pred <- knn(as.numeric(train_matrix), as.numeric(test_matrix), train_sample$Data.Yeild.Interest.Rate..Discount.Rate, k)
sum(is.na(train_matrix))
# Check for missing values in test_matrix
sum(is.na(test_matrix))
# Remove missing values from train_matrix and train_sample$Data.Yeild.Interest.Rate..Discount.Rate
train_matrix <- train_matrix[complete.cases(train_matrix), ]
train_sample$Data.Yeild.Interest.Rate..Discount.Rate <- train_sample$Data.Yeild.Interest.Rate..Discount.Rate[complete.cases(train_matrix)]
# Remove missing values from test_matrix
test_matrix <- test_matrix[complete.cases(test_matrix), ]
pred <- knn(as.numeric(train_matrix), as.numeric(test_matrix), train_sample$Data.Yeild.Interest.Rate..Discount.Rate, k)
# compare the predicted values to the actual values in the testing set
accuracy <- mean(test_sample$Car_Cancellation)
cat("Accuracy:", round(accuracy, 3))
pred <- knn(as.numeric(train_matrix), as.numeric(test_matrix), train_sample$Data.Yeild.Interest.Rate..Discount.Rate, k)
# Remove missing values from train_matrix and train_sample$Data.Yeild.Interest.Rate..Discount.Rate
train_matrix <- train_matrix[complete.cases(train_matrix), ]
train_sample$Data.Yeild.GPD <- train_sample$Data.Yeild.GPD[complete.cases(train_matrix)]
# Remove missing values from test_matrix
test_matrix <- test_matrix[complete.cases(test_matrix), ]
pred <- knn(as.numeric(train_matrix), as.numeric(test_matrix), train_sample$Data.Yeild.GPD, k)
# compare the predicted values to the actual values in the testing set
accuracy <- mean(test_sample$Car_Cancellation)
cat("Accuracy:", round(accuracy, 3))
# use first 250 rows of data
prediction.df <- prediction.df[1:250, ]
# select variables for regression
selected.var <- c(6, 7, 8, 9,10,12)
# partition data
set.seed(1)  # set seed for reproducing the partition
train.index <- sample(c(1:250), 100)
train.df <- prediction.df[train.index, selected.var]
valid.df <- prediction.df[-train.index, selected.var]
# use lm() to run a linear regression of Price on all 11 predictors in the
# training set.
# use . after ~ to include all the remaining columns in train.df as predictors.
PredictRecession.lm <- lm(Data.yeild..Unemployment.Rate ~ ., data = train.df)
#  use options() to ensure numbers are not displayed in scientific notation.
options(scipen = 499)
summary(PredictRecession.lm)
library(forecast)
# use predict() to make predictions on a new set.
PredictRecession.lm.pred <- predict(PredictRecession.lm, valid.df)
##other validation sets car.lm.pred <- predict(car.lm, valid2.data ) ##car.lm.pred <- predict(car.lm, newdata=car.df[valid3,],na.action=na.pass)
options(scipen=499, digits = 1)
some.residuals <- valid.df$Data.yeild..Unemployment.Rate[1:20] - PredictRecession.lm.pred[1:20]
data.frame("Predicted" = PredictRecession.lm.pred[1:20], "Actual" = valid.df$Data.yeild..Unemployment.Rate[1:20],
"Residual" = some.residuals)
options(scipen=499, digits = 3)
# use accuracy() to compute common accuracy measures.
accuracy(PredictRecession.lm.pred, valid.df$Data.yeild..Unemployment.Rate)
# Fit a logistic regression model
model <- glm(Recession ~ Data.yeild..Unemployment.Rate, data = train.df, family = binomial)
# Print the model summary
summary(model)
# Predict probabilities of recession
probabilities <- predict(model, type = "response")
# Predict binary outcomes of recession (1) or non-recession (0)
predictions <- ifelse(probabilities > 0.5, 1, 0)
e1071
e1071
## Performing the Niave Bias
library(e1071)
delays.nb <- naiveBayes(train.df$Data.yeild..Unemployment.Rate ~ ., data = train.df)
## predict probabilities
pred.prob <- predict(delays.nb, newdata = valid.df, type = "raw")
## predict class membership
pred.class <- predict(delays.nb, newdata = valid.df)
print(pred.class)
summary(pred.class)
accuracy <- mean(train.df$Data.yeild..Unemployment.Rate)
cat("Accuracy:", round(accuracy, 3))
prediction.data <- read.csv("/Users/priyakadam/Downloads/recession_prediction.csv", header = TRUE)  # load data
prediction.data$Data.Yeild.GPD <- replace(prediction.data$Data.Yeild.GPD, prediction.data$Data.Yeild.GPD == "#N/A", 0)
print(prediction.data)
predictingRecession.ts <- ts(prediction.data$Date, start = c(1977, 1), end = c(2019, 12), freq = 7)
predictingRecession.ts <- as.numeric(predictingRecession.ts)
#############
## training set
library(forecast)
predictingRecession.ts <- ts(predictingRecession.ts)
train.lm.pred <- forecast(train.lm, h = nValid, level = 0)
summary(train.lm.poly.trend)
train.lm.poly.trend.pred <- forecast(train.lm.poly.trend, h = nValid, level = 0)
## Cheking if #N/A values exists. Since we already converted them 0, the function should a return a boolean negative
any(is.na(predictingRecession.ts)) #output is FALSE
train.lm.expo.trend.pred <- forecast(train.lm.expo.trend, h = nValid, level = 0)
# Creating a sample time series object
dates <- seq(as.Date("1977-01-01"), as.Date("2022-01-01"), by = "month")
values <- rnorm(length(dates))
predictingRecession.ts <- ts(values, start = c(1977, 1), frequency = 12)
# Subsetting the time series object
predictingRecession.ts <- window(predictingRecession.ts, start = c(1977, 1), end = c(2019, 12))
train.lm.trend.season <- tslm(predictingRecession.ts ~ trend + I(trend^2) + season)
train.res.arima <- Arima(train.lm.trend.season$residuals,   order = c(1,0,0))
valid.res.arima.pred <- forecast(train.res.arima, h = 1)
par(mfrow = c(2, 1))
plot(train.lm.pred, ylim = c(1.10, 12.0), ylab = "Date for predicting Recession", xlab =
"Time", bty = "l", xaxt = "n", xlim = c(1977,1995.25), main = "", flty = 2)
axis(1, at = seq(1977, 2019, 1), labels = format(seq(1977, 2019, 1)))
lines(train.lm.pred$fitted, lwd = 2, col = "blue")
lines(valid.ts)
plot(train.lm.pred$residuals, ylim = c(-420, 500), ylab = "Forecast Errors",
xlab = "Time", bty = "l", xaxt = "n", xlim = c(1977,2019), main = "")
axis(1, at = seq(1977, 2019, 1), labels = format
dates <- seq(as.Date("1977-01-01"), as.Date("2019-12-01"), by = "month")
dates <- seq(as.Date("1977-01-01"), as.Date("2019-12-01"), by = "month")
data <- data.frame(Date = dates, Unemployment.Rate = train.df$Data.yeild..Unemployment.Rate)
dates <- seq(as.Date("1977-01-01"), as.Date("2019-12-01"), by = "month")
data <- data.frame(Date = dates, Unemployment.Rate = train.df$Data.yeild..Unemployment.Rate)
data <- data.frame(Date = dates, Unemployment.Rate = train.df$GOLD)
pred_probs <- predict(model, newdata = data, type = "response")
data <- data.frame(Date = dates, Unemployment.Rate = train.df$GOLD)
# Convert date column to Date format
train.df$Date <- as.Date(train.df$Date)
# Create a time series object
ts_data <- ts(train.df$Data.yeild..Unemployment.Rate, start = c(1977, 1), end = c(2019, 12), frequency = 12)
# Create a time series plot
plot.ts(ts_data, main = "Unemployment Rate Time Series", xlab = "Year", ylab = "Unemployment Rate")
data <- data.frame(Date = dates, Unemployment.Rate = train.df$Data.yeild..Unemployment.Rate)
pred_probs <- predict(model, newdata = data, type = "response")
pred_df <- data.frame(Date = dates, Pred_Prob = pred_probs)
library(ggplot2)
ggplot(pred_df, aes(x = Date, y = Pred_Prob)) +
geom_line() +
labs(x = "Date", y = "Predicted Probability of Recession")
# Create a time series plot
plot.ts(ts_data, main = "Unemployment Rate Time Series", xlab = "Year", ylab = "Unemployment Rate")
# Loading Housing data
gnpdData.df <- read.csv("/Users/priyakadam/Documents/RESEARCH-WORK/gnpd-new-variables-added.csv", header = TRUE)  # load data
dim(gnpdData.df)  # find the dimension of data frame
# Finding the median of home prices
dim(gnpdData.df$Ethical) # using median() function
table(gnpdData.df$Company)
hist(gnpdData.df$Company)
pie(table(gnpdData.df$Company))
summary(gnpdData.df$Company)
hist(gnpdData.df$Safety...Based.on.pacakging.material.used, xlab = "Safety...Based.on.pacakging.material.used")
# converting the character (factor) variable into numeric variable
gnpdData.df$Type.of.packaging...Compostable..durable..recyclable..trash. <- as.numeric(gnpdData.df$Type.of.packaging...Compostable..durable..recyclable..trash.)
hist(gnpdData.df$Type.of.packaging...Compostable..durable..recyclable..trash., xlab = "Type.of.packaging...Compostable..durable..recyclable..trash.")
pie(table(my_data), main = "Proportion of Categories")
##Partitioning the data to run confusion mattrix
train.df <- gnpdData.df[train.index, ]
valid.df <- gnpdData.df[-train.index, ]
## running logistic regression for all the predictors
logit.reg <- glm(Price.in.US.Dollars ~ ., data = train.df, family = "binomial")
options(scipen = 999)
summary(logit.reg)
logit.reg.pred <- predict(logit.reg, valid.df[, -14], type = "response")
# first 5 actual and predicted records
data.frame(actual = gnpdData.df$Price.in.US.Dollars[1:5],  predicted = logit.reg.pred[1:5])
### Computing accuracy and confusion mattrix
## Creating confusion matrix
confusionMatrix(as.factor(ifelse(p>0.5,'0','1')),as.factor(gnpdData.df$Ethical))
View(gnpdData.df)
## running logistic regression for all the predictors
logit.reg <- glm(Organic, data = train.df, family = "binomial")
## running logistic regression for all the predictors
logit.reg <- glm(Organic ~ ., data = train.df, family = "binomial")
options(scipen = 999)
summary(logit.reg)
# Loading packages and libaries that will be required for prediction
install.packages("caret")
install.packages("data.table")
library(caret)
library(e1071)
library(forecast)
library(FNN)
library(GGally)
library(data.table)
# Loading the  data to predict result from the data
prediction.df <- read.csv("/Users/priyakadam/Downloads/recession_prediction.csv", header = TRUE)  # load data
dim(prediction.df)  # find the dimension of data frame
# Removing #N/A values
prediction.df$Data.Yeild.GPD <- replace(prediction.df$Data.Yeild.GPD, prediction.df$Data.Yeild.GPD == "#N/A", 0)
# printing to verify if the #N/A values are removed
print(prediction.df)
# use first 250 rows of data
prediction.df <- prediction.df[1:250, ]
# select variables for regression
selected.var <- c(6, 7, 8, 9,10,12)
# partition data
set.seed(1)  # set seed for reproducing the partition
train.index <- sample(c(1:250), 100)
train.df <- prediction.df[train.index, selected.var]
valid.df <- prediction.df[-train.index, selected.var]
# use lm() to run a linear regression of Price on all 11 predictors in the
# training set.
# use . after ~ to include all the remaining columns in train.df as predictors.
PredictRecession.lm <- lm(Data.yeild..Unemployment.Rate ~ ., data = train.df)
#  use options() to ensure numbers are not displayed in scientific notation.
options(scipen = 499)
summary(PredictRecession.lm)
library(forecast)
# use predict() to make predictions on a new set.
PredictRecession.lm.pred <- predict(PredictRecession.lm, valid.df)
##other validation sets car.lm.pred <- predict(car.lm, valid2.data ) ##car.lm.pred <- predict(car.lm, newdata=car.df[valid3,],na.action=na.pass)
options(scipen=499, digits = 1)
some.residuals <- valid.df$Data.yeild..Unemployment.Rate[1:20] - PredictRecession.lm.pred[1:20]
data.frame("Predicted" = PredictRecession.lm.pred[1:20], "Actual" = valid.df$Data.yeild..Unemployment.Rate[1:20],
"Residual" = some.residuals)
options(scipen=499, digits = 3)
# use accuracy() to compute common accuracy measures.
accuracy(PredictRecession.lm.pred, valid.df$Data.yeild..Unemployment.Rate)
## Performing the Niave Bias
library(e1071)
delays.nb <- naiveBayes(train.df$Data.yeild..Unemployment.Rate ~ ., data = train.df)
## predict probabilities
pred.prob <- predict(delays.nb, newdata = valid.df, type = "raw")
## predict class membership
pred.class <- predict(delays.nb, newdata = valid.df)
print(pred.class)
summary(pred.class)
accuracy <- mean(train.df$Data.yeild..Unemployment.Rate)
cat("Accuracy:", round(accuracy, 3))
prediction.data <- read.csv("/Users/priyakadam/Downloads/recession_prediction.csv", header = TRUE)  # load data
prediction.data$Data.Yeild.GPD <- replace(prediction.data$Data.Yeild.GPD, prediction.data$Data.Yeild.GPD == "#N/A", 0)
print(prediction.data)
predictingRecession.ts <- ts(prediction.data$Date, start = c(1977, 1), end = c(2019, 12), freq = 7)
predictingRecession.ts <- as.numeric(predictingRecession.ts)
#############
## training set
library(forecast)
predictingRecession.ts <- ts(predictingRecession.ts)
train.lm.pred <- forecast(train.lm, h = nValid, level = 0)
summary(train.lm.poly.trend)
train.lm.poly.trend.pred <- forecast(train.lm.poly.trend, h = nValid, level = 0)
## Cheking if #N/A values exists. Since we already converted them 0, the function should a return a boolean negative
any(is.na(predictingRecession.ts)) #output is FALSE
train.lm.expo.trend.pred <- forecast(train.lm.expo.trend, h = nValid, level = 0)
# Creating a sample time series object
dates <- seq(as.Date("1977-01-01"), as.Date("2022-01-01"), by = "month")
values <- rnorm(length(dates))
predictingRecession.ts <- ts(values, start = c(1977, 1), frequency = 12)
# Subsetting the time series object
predictingRecession.ts <- window(predictingRecession.ts, start = c(1977, 1), end = c(2019, 12))
dates <- seq(as.Date("1977-01-01"), as.Date("2019-12-01"), by = "month")
# Convert date column to Date format
train.df$Date <- as.Date(train.df$Date)
# Create a time series object
ts_data <- ts(train.df$Data.yeild..Unemployment.Rate, start = c(1977, 1), end = c(2019, 12), frequency = 12)
# Create a time series plot
plot.ts(ts_data, main = "Unemployment Rate Time Series", xlab = "Year", ylab = "Unemployment Rate")
dates <- seq(as.Date("1977-01-01"), as.Date("2019-12-01"), by = "month")
# Convert date column to Date format
train.df$Date <- as.Date(train.df$Date)
# Create a time series object
ts_data <- ts(train.df$Data.yeild..Unemployment.Rate, start = c(1977, 1), end = c(2019, 12), frequency = 12)
# Create a time series plot
plot.ts(ts_data, main = "Unemployment Rate Time Series", xlab = "Year", ylab = "Unemployment Rate")
#END
#END
#--------------------------------------------------
prediction.data <- read.csv("/Users/priyakadam/Downloads/recession_prediction.csv", header = TRUE)  # load data
prediction.data$Data.Yeild.GPD <- replace(prediction.data$Data.Yeild.GPD, prediction.data$Data.Yeild.GPD == "#N/A", 0)
print(prediction.data)
predictingRecession.ts <- ts(prediction.data$Date, start = c(1977, 1), end = c(2019, 12), freq = 7)
predictingRecession.ts <- as.numeric(predictingRecession.ts)
#############
## training set
library(forecast)
predictingRecession.ts <- ts(predictingRecession.ts)
train.lm.pred <- forecast(train.lm, h = nValid, level = 0)
summary(train.lm.poly.trend)
prediction.data$Data.Yeild.GPD <- replace(prediction.data$Data.Yeild.GPD, prediction.data$Data.Yeild.GPD == "#N/A", 0)
print(prediction.data)
predictingRecession.ts <- ts(prediction.data$Date, start = c(1977, 1), end = c(2019, 12), freq = 4)
predictingRecession.ts <- as.numeric(predictingRecession.ts)
#############
## training set
library(forecast)
predictingRecession.ts <- ts(predictingRecession.ts)
train.lm.pred <- forecast(train.lm, h = nValid, level = 0)
summary(train.lm.poly.trend)
prediction.data <- read.csv("/Users/priyakadam/Downloads/recession_prediction.csv", header = TRUE)  # load data
prediction.data$Data.Yeild.GPD <- replace(prediction.data$Data.Yeild.GPD, prediction.data$Data.Yeild.GPD == "#N/A", 0)
print(prediction.data)
predictingRecession.ts <- ts(prediction.data$Date, start = c(1977, 1), end = c(2019, 12), freq = 4)
predictingRecession.ts <- as.numeric(predictingRecession.ts)
#############
## training set
library(forecast)
predictingRecession.ts <- ts(predictingRecession.ts)
train.lm.pred <- forecast(train.lm, h = nValid, level = 0)
summary(train.lm.poly.trend)
prediction.data$Data.Yeild.GPD <- replace(prediction.data$Data.Yeild.GPD, prediction.data$Data.Yeild.GPD == "#N/A", 0)
print(prediction.data)
predictingRecession.ts <- ts(prediction.data$Date, start = c(1977, 1), end = c(2019, 12), freq = 10)
predictingRecession.ts <- as.numeric(predictingRecession.ts)
#############
## training set
library(forecast)
predictingRecession.ts <- ts(predictingRecession.ts)
train.lm.pred <- forecast(train.lm, h = nValid, level = 0)
summary(train.lm.poly.trend)
prediction.data$Data.Yeild.GPD <- replace(prediction.data$Data.Yeild.GPD, prediction.data$Data.Yeild.GPD == "#N/A", 0)
print(prediction.data)
predictingRecession.ts <- ts(prediction.data$Date, start = c(1977, 1), end = c(2019, 12), freq = 10)
predictingRecession.ts <- as.numeric(predictingRecession.ts)
#############
## training set
library(forecast)
predictingRecession.ts <- ts(predictingRecession.ts)
train.lm.pred <- forecast(train.lm, h = nValid, level = 0)
summary(train.lm.poly.trend)
train.lm.poly.trend <- tslm(predictingRecession.ts ~ trend + I(trend^2))
summary(train.lm.poly.trend)
toysRusRevenues.data <- read.csv("/Users/priyakadam/Downloads/ToysRUsRevenues.csv", header = TRUE)  # load data
toysRusRevenues.ts <- ts(toysRusRevenues.data$Revenue.in.million..., start = c(1992, 1), end = c(1995, 3), freq = 4)
## training set
library(forecast)
train.lm <- tslm(toysRusRevenues.ts ~ trend)
train.lm.pred <- forecast(train.lm, h = nValid, level = 0)
## Computing error for the model
train.lm.poly.trend <- tslm(toysRusRevenues.ts ~ trend + I(trend^2))
summary(train.lm.poly.trend)
View(toysRusRevenues.data)
View(toysRusRevenues.data)
toysRusRevenues.data <- read.csv("/Users/priyakadam/Downloads/ToysRUsRevenues.csv", header = TRUE)  # load data
toysRusRevenues.ts <- ts(toysRusRevenues.data$Revenue.in.million..., start = c(1992, 1), end = c(1995, 3), freq = 4)
## training set
library(forecast)
train.lm <- tslm(toysRusRevenues.ts ~ trend)
train.lm.pred <- forecast(train.lm, h = nValid, level = 0)
## Computing error for the model
train.lm.poly.trend <- tslm(toysRusRevenues.ts ~ trend + I(trend^2))
summary(train.lm.poly.trend)
prediction.data <- read.csv("/Users/priyakadam/Downloads/recession_prediction.csv", header = TRUE)  # load data
prediction.data$Data.Yeild.GPD <- replace(prediction.data$Data.Yeild.GPD, prediction.data$Data.Yeild.GPD == "#N/A", 0)
print(prediction.data)
predictingRecession.ts <- ts(prediction.data$Date, start = c(1977, 1), end = c(2019, 12), freq = 10)
predictingRecession.ts <- as.numeric(predictingRecession.ts)
#############
## training set
library(forecast)
predictingRecession.ts <- ts(predictingRecession.ts)
train.lm.pred <- forecast(train.lm, h = nValid, level = 0)
train.lm.poly.trend <- tslm(predictingRecession.ts ~ trend + I(trend^2))
prediction.data$Data.Yeild.GPD <- replace(prediction.data$Data.Yeild.GPD, prediction.data$Data.Yeild.GPD == "#N/A", 0)
print(prediction.data)
predictingRecession.ts <- ts(prediction.data$Date, start = c(1977, 1), end = c(2019, 12), freq = 10)
#############
## training set
library(forecast)
predictingRecession.ts <- ts(predictingRecession.ts)
train.lm.pred <- forecast(train.lm, h = nValid, level = 0)
train.lm.poly.trend <- tslm(predictingRecession.ts ~ trend + I(trend^2))
summary(train.lm.poly.trend)
train.lm.poly.trend.pred <- forecast(train.lm.poly.trend, h = nValid, level = 0)
prediction.data$Data.Yeild.GPD <- replace(prediction.data$Data.Yeild.GPD, prediction.data$Data.Yeild.GPD == "#N/A", 0)
print(prediction.data)
predictingRecession.ts <- ts(prediction.data$Date, start = c(1977, 1), end = c(2019, 12), freq = 10)
#############
## training set
library(forecast)
predictingRecession.ts <- ts(predictingRecession.ts)
train.lm.pred <- forecast(train.lm, h = nValid, level = 0)
train.lm.poly.trend <- tslm(predictingRecession.ts ~ trend + I(trend^2))
summary(train.lm.poly.trend)
## Cheking if #N/A values exists. Since we already converted them 0, the function should a return a boolean negative
any(is.na(predictingRecession.ts)) #output is FALSE
train.lm.expo.trend.pred <- forecast(train.lm.expo.trend, h = nValid, level = 0)
# Creating a sample time series object
dates <- seq(as.Date("1977-01-01"), as.Date("2022-01-01"), by = "month")
values <- rnorm(length(dates))
predictingRecession.ts <- ts(values, start = c(1977, 1), frequency = 12)
# Subsetting the time series object
predictingRecession.ts <- window(predictingRecession.ts, start = c(1977, 1), end = c(2019, 12))
dates <- seq(as.Date("1977-01-01"), as.Date("2019-12-01"), by = "month")
# Convert date column to Date format
train.df$Date <- as.Date(train.df$Date)
# Create a time series object
ts_data <- ts(train.df$Data.yeild..Unemployment.Rate, start = c(1977, 1), end = c(2019, 12), frequency = 12)
# Create a time series plot
plot.ts(ts_data, main = "Unemployment Rate Time Series", xlab = "Year", ylab = "Unemployment Rate")
## Performing the Niave Bias
library(e1071)
delays.nb <- naiveBayes(train.df$Data.yeild..Unemployment.Rate ~ ., data = train.df)
## predict probabilities
pred.prob <- predict(delays.nb, newdata = valid.df, type = "raw")
## predict class membership
pred.class <- predict(delays.nb, newdata = valid.df)
print(pred.class)
summary(pred.class)
accuracy <- mean(train.df$Data.yeild..Unemployment.Rate)
cat("Accuracy:", round(accuracy, 3))
